{"version":3,"sources":["constants.ts","converter/flop.ts","hooks/useLocalStorage.ts","converter/BitSegment.tsx","converter/BitPanel.tsx","converter/ConfigPanel.tsx","converter/Panel.tsx","converter/FormatConverter.tsx","converter/CustomFormatConverter.tsx","ui/Footer.tsx","ui/Header.tsx","ui/TabBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ROUNDING_MODE","UI_ACKNOWLEDGEMENT_TEXT","pre","link","post","BIGNUM_ACKNOWLEDGEMENT_TEXT","ISSUES_CONTRIBUTION_TEXT","BUILD_SOURCE_URL","process","BUILD_SOURCE_TEXT","DECIMAL_INPUT_FIELD_NAME","VALUE_STORED_FIELD_NAME","ERROR_FIELD_NAME","BIT_REPRESENTATION_FIELD_NAME","HEX_REPRESENTATION_FIELD","FIXED_SIGN_FIELD_NAME","CUSTOM_EXPONENT_FIELD_NAME","CUSTOM_SIGNIFICAND_FIELD_NAME","TOTAL_WIDTH_FIELD_NAME","CLIPBOARD_TOOLTIP_STRING","CLIPBOARD_BUTTON_STRING","POSITIVE_INFINITY_STRING","NEGATIVE_INFINITY_STRING","BACKGROUND_COLOR","ACCENT_COLOR","FlopType","Flop754Type","FORMATS","name","exponentWidth","significandWidth","urlPath","pageTitle","CUSTOM","minExponentWidth","maxExponentWidth","minSignificandWidth","maxSignificandWidth","useLocalStorage","key","initialValue","reviver","JSON","parse","useState","localStorageValue","localStorage","getItem","setItem","stringify","state","setState","useEffect","serializedState","Wrapper","styled","div","Title","h4","Field","p","BitField","BitCheckbox","input","BitSegment","props","value","decimal","bits","map","e","i","type","checked","onChange","updateBits","slice","deserializeFlop","jsonString","val","BigNumber","generateFlop754","sign","exponent","significand","some","every","NEGATIVE_INFINITY","POSITIVE_INFINITY","NAN","NORMAL","SUBNORMAL","parseInt","stringifyBits","getExponentBias","length","defaultFlop754","getExponentRange","min","deserializeFlop754","getExponent","flop754","toFixed","getSignificand","isSubnormal","stringifyFlop","flop","scientific","toExponential","join","stringifyBitsToHex","Array","from","Math","ceil","keys","reverse","concat","padStart","toString","bitsFromString","bitString","split","width","range","pow","max","roundHalfToEven","integer","fractional","fractionalBits","G","substring","R","S","roundTowardInfinity","roundTowardZero","newExponent","newInteger","newFractional","excess","plus","integerValue","ROUND_DOWN","isZero","minus","BitPanel","updateValue","exponentValue","significandValue","Row","Col","size","FieldName","RadioLabel","label","RadioButton","attrs","LineBreak","br","ConfigPanel","roundingMode","halfToEven","updateRoundingMode","towardZero","scientificNotation","updateNotation","InputField","ClipboardButton","button","Panel","formatName","decimalInput","setDecimalInput","binaryRep","setBinaryRep","hexRep","setHexRep","clipboard","useClipboard","clearInput","onHexInput","valid","hexString","bitLength","flat","bitsFromHexString","onCopyButton","text","copy","title","autoFocus","pattern","target","validity","updateInputValue","onClick","disabled","readOnly","stored","error","required","ref","h2","FormatConverter","initialLoad","useRef","setFlop","setFlop754","setRoundingMode","setScientificNotation","storedFlop","setStoredFlop","setError","onFlop754Update","exponentiatedBy","times","negated","convertFlop754ToFlop","updated754Value","isNegative","minExponentRange","maxExponentRange","abs","one","two","half","isGreaterThan","rem","modulo","idiv","convertFlopToFlop754","accurate","calculateError","current","of","repeat","padEnd","deconstructFlop754","inputValue","isScientific","React","Fragment","WidthPanel","NumberInputField","CustomFormatConverter","setExponentWidth","setSignificandWidth","isNaN","console","log","footer","Divider","hr","VersionNumber","Acknowledgements","Text","Link","a","TextWithLink","href","url","Footer","header","h1","Header","TabButton","TabBar","tabs","className","activeTab","clickTab","App","active","setActive","location","useLocation","history","useHistory","useMemo","set","DECIMAL_PLACES","ReactGA","initialize","testMode","listen","action","pageview","pathname","page","index","findIndex","document","push","path","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21e987cd.chunk.js","sourcesContent":["// app\nexport const APP_TITLE = \"IEEE 754-Style Floating-Point Converter\";\nexport const GA_UA_ID = \"UA-165443113-2\";\nexport const UI_ACKNOWLEDGEMENT_URL =\n  \"https://www.h-schmidt.net/FloatConverter/IEEE754.html\";\nexport const UI_ACKNOWLEDGEMENT_TEXT = {\n  pre: \"Converter UI from \",\n  link: \"h-schmidt's floating-point converter\",\n  post: \".\",\n};\nexport const BIGNUM_ACKNOWLEDGEMENT_URL =\n  \"https://mikemcl.github.io/bignumber.js/\";\nexport const BIGNUM_ACKNOWLEDGEMENT_TEXT = {\n  pre: \"Conversion routines powered by the \",\n  link: \"bignumber.js\",\n  post: \" library.\",\n};\nexport const ISSUES_CONTRIBUTION_URL = \"https://github.com/afterdusk/flop\";\nexport const ISSUES_CONTRIBUTION_TEXT = {\n  pre: \"Please report any issues on the \",\n  link: \"GitHub repo\",\n  post: \". Contributions are also welcome 😊\",\n};\nexport const BUILD_SOURCE_URL = `https://github.com/afterdusk/flop/tree/${process.env.REACT_APP_GIT_SHA}`;\nexport const BUILD_SOURCE_TEXT = {\n  pre: `Version ${process.env.REACT_APP_VERSION}, Build `,\n  link: `${process.env.REACT_APP_GIT_SHA}`,\n  post: \"\",\n};\nexport const IS_TEST_ENV = process.env.NODE_ENV === \"test\";\nexport const DECIMAL_INPUT_FIELD_NAME = \"Decimal Input\";\nexport const VALUE_STORED_FIELD_NAME = \"Value Stored\";\nexport const ERROR_FIELD_NAME = \"Error\";\nexport const BIT_REPRESENTATION_FIELD_NAME = \"Binary Representation\";\nexport const HEX_REPRESENTATION_FIELD = \"Hex Representation\";\nexport const ROUNDING_MODE_FIELD_NAME = \"Rounding Mode\";\nexport const NOTATION_FIELD_NAME = \"Result Notation\";\nexport const FIXED_SIGN_FIELD_NAME = \"Sign Length\";\nexport const CUSTOM_EXPONENT_FIELD_NAME = \"Exponent Length\";\nexport const CUSTOM_SIGNIFICAND_FIELD_NAME = \"Significand Length\";\nexport const TOTAL_WIDTH_FIELD_NAME = \"Total Length\";\nexport const CLIPBOARD_TOOLTIP_STRING = \"Copy to Clipboard\";\nexport const CLIPBOARD_BUTTON_STRING = \"Copy\";\nexport const POSITIVE_INFINITY_STRING = \"infinity\";\nexport const NEGATIVE_INFINITY_STRING = \"-infinity\";\nexport const NAN_STRING = \"NaN\";\nexport const HEX_PREFIX_STRING = \"0x\";\n\n// local storage\nexport const DECIMAL_INPUT_STORAGE_KEY = \"-input\";\nexport const FLOP_STORAGE_KEY = \"-flop\";\nexport const FLOP754_STORAGE_KEY = \"-flop754\";\nexport const ROUNDING_STORAGE_KEY = \"-rounding\";\nexport const NOTATION_STORAGE_KEY = \"-notation\";\nexport const CUSTOM_EXPONENT_KEY = \"custom-exponent\";\nexport const CUSTOM_SIGNIFICAND_KEY = \"custom-significand\";\n\n// styling\nexport const BACKGROUND_COLOR = \"#0e171c\";\nexport const ACCENT_COLOR = \"#039cfd\";\nexport const MAIN_FONT_FAMILY = `'Roboto', sans-serif;`;\nexport const MONOSPACED_FONT_FAMILY = `'Roboto Mono', monospace`;\n\n// bignumber.js\nexport const BIGNUMBER_DECIMAL_PLACES = 3000;\n\n// rounding\nexport enum ROUNDING_MODE {\n  halfToEven,\n  towardZero,\n}\n\n// formats\nexport const FP32 = {\n  name: \"FP32\",\n  exponentWidth: 8,\n  significandWidth: 23,\n  urlPath: \"/float-converter\",\n  pageTitle: \"Float Converter\",\n};\nexport const FP64 = {\n  name: \"FP64\",\n  exponentWidth: 11,\n  significandWidth: 52,\n  urlPath: \"/double-converter\",\n  pageTitle: \"Double Converter\",\n};\nexport const FP16 = {\n  name: \"FP16\",\n  exponentWidth: 5,\n  significandWidth: 10,\n  urlPath: \"/half-precision-converter\",\n  pageTitle: \"Half Precision Converter\",\n};\nexport const BF16 = {\n  name: \"bfloat16\",\n  exponentWidth: 8,\n  significandWidth: 7,\n  urlPath: \"/brainfloat-converter\",\n  pageTitle: \"Brain Float Converter\",\n};\nexport const TF32 = {\n  name: \"TensorFloat-32\",\n  exponentWidth: 8,\n  significandWidth: 10,\n  urlPath: \"/tensorfloat-converter\",\n  pageTitle: \"TensorFloat Converter\",\n};\nexport const FORMATS = [FP32, FP64, FP16, BF16, TF32];\nexport const DEFAULT_FORMAT_INDEX = 0;\nexport const CUSTOM = {\n  name: \"Custom\",\n  minExponentWidth: 2,\n  maxExponentWidth: 11,\n  minSignificandWidth: 1,\n  maxSignificandWidth: 52,\n  urlPath: \"/arbitrary-float-converter\",\n  pageTitle: \"Arbitrary Float Converter\",\n};\n","import BigNumber from \"bignumber.js\";\n\nimport {\n  NAN_STRING,\n  NEGATIVE_INFINITY_STRING,\n  POSITIVE_INFINITY_STRING,\n  ROUNDING_MODE,\n} from \"../constants\";\n\n/**\n * Represents a floating-point value.\n * Precision and range is unbounded.\n */\nexport interface Flop {\n  type: FlopType;\n  value: BigNumber;\n}\n\n/**\n * Types of floating-point values.\n */\nexport enum FlopType {\n  NORMAL,\n  POSITIVE_INFINITY,\n  NEGATIVE_INFINITY,\n  NAN,\n}\n\n/**\n * Represents a floating-point value in IEEE 754 style.\n * Precision and range is implicitly bounded by exponent and\n * significand widths used during intialization, but otherwise\n * the interface imposes no bounds.\n */\nexport interface Flop754 {\n  type: Flop754Type;\n  sign: boolean;\n  exponent: number;\n  significand: BigNumber;\n}\n\n/**\n * Types of IEEE 754 values.\n */\nexport enum Flop754Type {\n  NORMAL,\n  SUBNORMAL,\n  POSITIVE_INFINITY,\n  NEGATIVE_INFINITY,\n  NAN,\n}\n\n/**\n * Returns a Flop object from a decimal value.\n * @param decimal string decimal value\n * @returns Flop object\n */\nexport const generateFlop = (decimal: string): Flop => {\n  const type = FlopType.NORMAL;\n  const value = new BigNumber(decimal);\n  return { type, value };\n};\n\n/**\n * @returns Flop object representing zero.\n */\nexport const defaultFlop = (): Flop => {\n  const type = FlopType.NORMAL;\n  const value = new BigNumber(0);\n  return { type, value };\n};\n\n/**\n * Deserialize json string to Flop object.\n * @param jsonString Flop serialized with JSON.stringify\n * @returns deserialized Flop\n */\nexport const deserializeFlop = (jsonString: string): Flop => {\n  return JSON.parse(jsonString, (key, val) => {\n    return key === \"value\" ? new BigNumber(val) : val;\n  });\n};\n\n/**\n * Returns a Flop754 object from constituent boolean arrays representing bits.\n * @param sign sign bit\n * @param exponent exponent bits\n * @param significand significand bits\n * @returns Flop754 object\n */\nexport const generateFlop754 = (\n  sign: boolean[],\n  exponent: boolean[],\n  significand: boolean[]\n): Flop754 => {\n  const type = exponent.some((e) => e)\n    ? exponent.every((e) => e)\n      ? significand.every((e) => !e)\n        ? sign[0]\n          ? Flop754Type.NEGATIVE_INFINITY\n          : Flop754Type.POSITIVE_INFINITY\n        : Flop754Type.NAN\n      : Flop754Type.NORMAL\n    : Flop754Type.SUBNORMAL;\n  const signBit = sign[0];\n  const adjustedExponent =\n    (type === Flop754Type.SUBNORMAL\n      ? 1\n      : parseInt(stringifyBits(exponent), 2)) -\n    getExponentBias(exponent.length);\n  const adjustedSignificand = new BigNumber(\n    (type === Flop754Type.SUBNORMAL ? \".\" : \"1.\") + stringifyBits(significand),\n    2\n  );\n\n  return {\n    type,\n    sign: signBit,\n    exponent: adjustedExponent,\n    significand: adjustedSignificand,\n  };\n};\n\n/**\n * @param exponentWidth of the target type\n * @returns Flop754 object representing zero\n */\nexport const defaultFlop754 = (exponentWidth: number): Flop754 => {\n  const type = Flop754Type.SUBNORMAL;\n  const sign = false;\n  const exponent = getExponentRange(exponentWidth).min;\n  const significand = new BigNumber(0);\n  return { type, sign, exponent, significand };\n};\n\n/**\n * Deserialize json string to Flop754 object.\n * @param jsonString Flop754 serialized with JSON.stringify\n * @returns deserialized Flop754\n */\nexport const deserializeFlop754 = (jsonString: string): Flop754 => {\n  return JSON.parse(jsonString, (key, val) => {\n    return key === \"significand\" ? new BigNumber(val) : val;\n  });\n};\n\n/**\n * @param flop754 object to return exponent of\n * @returns exponent value as a string\n */\nexport const getExponent = (flop754: Flop754): string => {\n  return flop754.exponent.toFixed();\n};\n\n/**\n * @param flop754 object to return significand of\n * @returns significand value as a string\n */\nexport const getSignificand = (flop754: Flop754): string => {\n  return flop754.significand.toFixed();\n};\n\n/**\n * @param flop754 object to test subnormal status\n * @returns true if value is subnormal\n */\nexport const isSubnormal = (flop754: Flop754): boolean => {\n  return flop754.type === Flop754Type.SUBNORMAL;\n};\n\n/**\n * Deconstructs a Flop754 object into constituent boolean objects representing bits.\n * @param flop754 Flop754 object to be deconstructed\n * @param exponentWidth bit width of exponent segment\n * @param significandWidth bit width of significand segment\n * @returns variable for sign and arrays for exponent, significand\n */\n// TODO: Handle implicit assumption that significand in flop754 fits width\nexport const deconstructFlop754 = (\n  flop754: Flop754,\n  exponentWidth: number,\n  significandWidth: number\n): {\n  sign: boolean[];\n  exponent: boolean[];\n  significand: boolean[];\n} => {\n  const sign = Array.of(flop754.sign);\n  const exponent = bitsFromString(\n    (() => {\n      switch (flop754.type) {\n        case Flop754Type.POSITIVE_INFINITY:\n        case Flop754Type.NEGATIVE_INFINITY:\n        case Flop754Type.NAN:\n          return \"1\".repeat(exponentWidth);\n        case Flop754Type.SUBNORMAL:\n          return \"\";\n        case Flop754Type.NORMAL:\n          return (flop754.exponent + getExponentBias(exponentWidth)).toString(\n            2\n          );\n      }\n    })().padStart(exponentWidth, \"0\")\n  );\n  const significand = bitsFromString(\n    (() => {\n      switch (flop754.type) {\n        case Flop754Type.POSITIVE_INFINITY:\n        case Flop754Type.NEGATIVE_INFINITY:\n          return \"0\".repeat(significandWidth);\n        case Flop754Type.NAN:\n        case Flop754Type.SUBNORMAL:\n        case Flop754Type.NORMAL:\n          return flop754.significand.toString(2).split(\".\")[1] ?? \"\";\n      }\n    })()\n      .padEnd(significandWidth, \"0\")\n      .substring(0, significandWidth)\n  );\n\n  return { sign, exponent, significand };\n};\n\n/**\n * Converts a Flop754 object to a Flop object.\n * @param flop754 object to be converted\n * @returns resulting Flop object\n */\nexport const convertFlop754ToFlop = (flop754: Flop754): Flop => {\n  const type = (() => {\n    switch (flop754.type) {\n      case Flop754Type.POSITIVE_INFINITY:\n        return FlopType.POSITIVE_INFINITY;\n      case Flop754Type.NEGATIVE_INFINITY:\n        return FlopType.NEGATIVE_INFINITY;\n      case Flop754Type.NAN:\n        return FlopType.NAN;\n      case Flop754Type.NORMAL:\n      case Flop754Type.SUBNORMAL:\n        return FlopType.NORMAL;\n    }\n  })();\n  const exponent = new BigNumber(2).exponentiatedBy(flop754.exponent);\n  const value = flop754.significand.times(exponent);\n  const signedValue = flop754.sign ? value.negated() : value;\n\n  return { type, value: signedValue };\n};\n\n/**\n * Converts a Flop object to a Flop754 object.\n * @param flop object to be converted\n * @param exponentWidth exponent bit size of target IEEE 754 type\n * @param significandWidth significand bit size of target IEEE 754 type\n * @param roundingMode rounding mode to use (default halfToEven)\n * @returns resulting Flop754 object\n */\n// TODO: Cleanup and optimize\nexport const convertFlopToFlop754 = (\n  flop: Flop,\n  exponentWidth: number,\n  significandWidth: number,\n  roundingMode = ROUNDING_MODE.halfToEven\n): Flop754 => {\n  // extract sign\n  const sign = flop.value.isNegative();\n\n  // convert to binary, normalize\n  const { min: minExponentRange, max: maxExponentRange } = getExponentRange(\n    exponentWidth\n  );\n\n  let integer: BigNumber = flop.value.abs().integerValue(BigNumber.ROUND_DOWN);\n  let fractional: BigNumber = flop.value.abs().minus(integer);\n  let exponent = 0;\n\n  const one = new BigNumber(\"1\");\n  const two = new BigNumber(\"2\");\n  const half = new BigNumber(\"0.5\");\n\n  while (integer.isGreaterThan(one)) {\n    const rem = integer.modulo(two);\n    integer = integer.idiv(two);\n    fractional = fractional.div(two);\n    exponent++;\n    if (!rem.isZero()) {\n      fractional = fractional.plus(half);\n    }\n  }\n\n  while (integer.isZero() && exponent > minExponentRange) {\n    fractional = fractional.times(two);\n    const excess = fractional.integerValue(BigNumber.ROUND_DOWN);\n    if (!excess.isZero()) {\n      fractional = fractional.minus(excess);\n      integer = integer.plus(excess);\n    }\n    exponent--;\n  }\n\n  // TODO: Fix this abomination\n  switch (roundingMode) {\n    case ROUNDING_MODE.halfToEven:\n      ({ exponent, integer, fractional } = roundHalfToEven(\n        exponent,\n        integer,\n        fractional,\n        significandWidth\n      ));\n      break;\n    case ROUNDING_MODE.towardZero:\n      ({ exponent, integer, fractional } = roundTowardZero(\n        exponent,\n        integer,\n        fractional,\n        significandWidth\n      ));\n      break;\n  }\n\n  let significand = integer.plus(fractional);\n\n  // set type\n  let type: Flop754Type = Flop754Type.NORMAL;\n  if (integer.isZero()) {\n    type = Flop754Type.SUBNORMAL;\n  }\n  if (exponent > maxExponentRange) {\n    type = sign ? Flop754Type.NEGATIVE_INFINITY : Flop754Type.POSITIVE_INFINITY;\n    exponent = maxExponentRange + 1;\n    significand = one;\n  }\n\n  // TODO: Is this necessary?\n  // override type assignment if FlopType is set\n  switch (flop.type) {\n    case FlopType.POSITIVE_INFINITY:\n      type = Flop754Type.POSITIVE_INFINITY;\n      break;\n    case FlopType.NEGATIVE_INFINITY:\n      type = Flop754Type.NEGATIVE_INFINITY;\n      break;\n    case FlopType.NAN:\n      type = Flop754Type.NAN;\n      break;\n  }\n\n  return {\n    type,\n    sign,\n    exponent,\n    significand,\n  };\n};\n\n/**\n * Gets the difference between two Flop objects.\n * @param accurate Flop value subtracted from\n * @param stored Flop object being subtracted\n * @returns resulting value as Flop object\n */\nexport const calculateError = (accurate: Flop, stored: Flop): Flop => {\n  // TODO: Handle arithmetic with non-normal numbers\n  const value = accurate.value.minus(stored.value);\n  return { type: stored.type, value };\n};\n\n/**\n * Converts Flop object to decimal string.\n * @param flop object to convert\n * @param scientific use scientific notation (default false)\n * @returns decimal string\n */\nexport const stringifyFlop = (flop: Flop, scientific = false): string => {\n  switch (flop.type) {\n    case FlopType.POSITIVE_INFINITY:\n      return POSITIVE_INFINITY_STRING;\n    case FlopType.NEGATIVE_INFINITY:\n      return NEGATIVE_INFINITY_STRING;\n    case FlopType.NAN:\n      return NAN_STRING;\n    case FlopType.NORMAL:\n      return scientific ? flop.value.toExponential() : flop.value.toFixed();\n  }\n};\n\n/**\n * Converts bit array to binary string.\n * @param bits boolean array representing bits\n * @returns binary string\n */\nexport const stringifyBits = (bits: boolean[]): string => {\n  return bits.map((e) => (e ? \"1\" : \"0\")).join(\"\");\n};\n\n/**\n * Converts bit array to hexadecimal string.\n * @param bits boolean array representing bits (length should be in multiple of 4)\n * @returns hexadecimal string\n */\nexport const stringifyBitsToHex = (bits: boolean[]): string => {\n  return Array.from(Array(Math.ceil(bits.length / 4)).keys())\n    .reverse()\n    .map((i) => -(i * 4 + 1))\n    .map((i) => bits.concat(false).slice(i - 4, i))\n    .map((e) => stringifyBits(e))\n    .map((e) => e.padStart(4, \"0\"))\n    .map((e) => parseInt(e, 2).toString(16))\n    .join(\"\");\n};\n\n/**\n * Converts binary string to bit array.\n * @param bitString binary string\n * @returns boolean array representing bits\n */\nexport const bitsFromString = (bitString: string): boolean[] => {\n  return bitString.split(\"\").map((e) => (e === \"1\" ? true : false));\n};\n\n/**\n * Converts hexadecimal string to bit array.\n * @param hexString hexadecimal string\n * @param bitLength length of output binary string (hex string length * 4 if not provided)\n * @returns boolean array representing bits\n */\nexport const bitsFromHexString = (\n  hexString: string,\n  bitLength: number = hexString.length * 4\n): boolean[] => {\n  return hexString\n    .split(\"\")\n    .map((e) => parseInt(e, 16).toString(2).padStart(4, \"0\"))\n    .map((e) => e.split(\"\"))\n    .flat(1)\n    .map((e) => (e === \"1\" ? true : false))\n    .slice(-bitLength);\n};\n\n/**\n * Gets the exponent range of a IEEE 754-style exponent segment.\n * @param width number of bits of exponent segment\n * @returns minimum and maximum exponents (of 2)\n */\nexport const getExponentRange = (\n  width: number\n): { min: number; max: number } => {\n  const range = Math.pow(2, width);\n  const min = -(range / 2 - 2);\n  const max = range / 2 - 1;\n  return { min, max };\n};\n\n/**\n * Gets the exponent bias in an IEEE 754-style exponent segment.\n * @param width number of bits of exponent segment\n * @returns exponent bias\n */\nexport const getExponentBias = (width: number): number => {\n  const range = Math.pow(2, width);\n  return range / 2 - 1;\n};\n\n// http://pages.cs.wisc.edu/~markhill/cs354/Fall2008/notes/flpt.apprec.html\n// https://stackoverflow.com/questions/8981913/how-to-perform-round-to-even-with-floating-point-numbers\n// TODO: Cleanup and add docs\nexport const roundHalfToEven = (\n  exponent: number,\n  integer: BigNumber,\n  fractional: BigNumber,\n  significandWidth: number\n): { exponent: number; integer: BigNumber; fractional: BigNumber } => {\n  const fractionalBits = fractional.toString(2).split(\".\")[1] ?? \"\";\n  // TODO: Is there a better way to handle this?\n  if (fractionalBits.length <= significandWidth) {\n    return { exponent, integer, fractional };\n  }\n\n  const G =\n    fractionalBits.substring(significandWidth, significandWidth + 1) ?? \"0\";\n  const R =\n    fractionalBits.substring(significandWidth + 1, significandWidth + 2) ?? \"0\";\n  const S = fractionalBits.length > significandWidth + 3 ? \"1\" : \"0\";\n\n  if (G === \"1\") {\n    // 111, 101, 110\n    if (R === \"1\" || S === \"1\") {\n      return roundTowardInfinity(\n        exponent,\n        integer,\n        fractional,\n        significandWidth\n      );\n    }\n\n    const LSB = fractionalBits.substring(\n      significandWidth - 1,\n      significandWidth\n    );\n\n    // (1)100\n    if (LSB === \"1\") {\n      return roundTowardInfinity(\n        exponent,\n        integer,\n        fractional,\n        significandWidth\n      );\n    }\n  }\n\n  // 0XX, (0)100\n  return roundTowardZero(exponent, integer, fractional, significandWidth);\n};\n\n// TODO: Cleanup and add docs\nexport const roundTowardInfinity = (\n  exponent: number,\n  integer: BigNumber,\n  fractional: BigNumber,\n  significandWidth: number\n): { exponent: number; integer: BigNumber; fractional: BigNumber } => {\n  const fractionalBits = fractional.toString(2).split(\".\")[1] ?? \"\";\n  // TODO: Is there a better way to handle this?\n  if (fractionalBits.length <= significandWidth) {\n    return { exponent, integer, fractional };\n  }\n\n  let newExponent = exponent;\n  let newInteger = integer;\n  let newFractional = new BigNumber(\n    \".\" + fractionalBits.substring(0, significandWidth),\n    2\n  );\n  newFractional = newFractional.plus(\n    new BigNumber(\".\" + \"1\".padStart(significandWidth, \"0\"), 2)\n  );\n\n  const excess = newFractional.integerValue(BigNumber.ROUND_DOWN);\n  if (!excess.isZero()) {\n    newFractional = newFractional.minus(excess);\n    // handle subnormal numbers\n    if (newInteger.isZero()) {\n      newInteger = new BigNumber(\"1\");\n    } else {\n      newExponent++;\n    }\n  }\n\n  return {\n    exponent: newExponent,\n    integer: newInteger,\n    fractional: newFractional,\n  };\n};\n\n// TODO: Cleanup and add docs\nexport const roundTowardZero = (\n  exponent: number,\n  integer: BigNumber,\n  fractional: BigNumber,\n  significandWidth: number\n): { exponent: number; integer: BigNumber; fractional: BigNumber } => {\n  const fractionalBits = fractional.toString(2).split(\".\")[1] ?? \"\";\n  // TODO: Is there a better way to handle this?\n  if (fractionalBits.length <= significandWidth) {\n    return { exponent, integer, fractional };\n  }\n\n  return {\n    exponent,\n    integer,\n    fractional: new BigNumber(\n      \".\" + fractionalBits.substring(0, significandWidth),\n      2\n    ),\n  };\n};\n","import { useEffect, useState } from \"react\";\n\n/**\n * Adapted from https://bit.dev/giladshoham/react-hooks/use/use-local-storage/~code\n * @param key local storage key\n * @param initialValue default value if key not found in store\n * @param reviver function to deserialize stored value\n * @returns deserialized value in local storage (if present)\n */\nconst useLocalStorage = <T>(\n  key: string,\n  initialValue?: T,\n  reviver = JSON.parse\n): [T, (value: T) => void] => {\n  const [state, setState] = useState<T>(() => {\n    try {\n      const localStorageValue = localStorage.getItem(key);\n      if (typeof localStorageValue !== \"string\") {\n        localStorage.setItem(key, JSON.stringify(initialValue));\n        return initialValue;\n      } else {\n        return reviver(localStorageValue);\n      }\n    } catch {\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    try {\n      const serializedState = JSON.stringify(state);\n      localStorage.setItem(key, serializedState);\n    } catch {\n      // do nothing on write error\n    }\n  });\n\n  return [state, setState];\n};\n\nexport default useLocalStorage;\n","import React, { FC, ReactElement } from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  box-sizing: border-box;\n  padding: 0.2rem;\n  margin: 0 auto;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.h4`\n  margin: 0;\n\n  font-size: 1.4rem;\n`;\n\nconst Field = styled.p`\n  min-width: 100%;\n  box-sizing: border-box;\n  padding: 0.4rem;\n  margin: 0;\n`;\n\nconst BitField = styled.div`\n  min-width: 100%;\n  box-sizing: border-box;\n  padding: 0.4rem;\n  margin: 0;\n\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n`;\n\nconst BitCheckbox = styled.input``;\n\ninterface SegmentProps {\n  name: string;\n  value: string;\n  decimal: string;\n  bits: boolean[];\n  updateBits: (bits: boolean[]) => void;\n}\n\nconst BitSegment: FC<SegmentProps> = (props: SegmentProps): ReactElement => (\n  <Wrapper>\n    <Title>{props.name}</Title>\n    <Field>{props.value}</Field>\n    <Field>{props.decimal}</Field>\n    <BitField>\n      {[...props.bits].map((e, i) => (\n        <BitCheckbox\n          key={i}\n          type=\"checkbox\"\n          checked={e}\n          onChange={() =>\n            props.updateBits([\n              ...props.bits.slice(0, i),\n              !props.bits[i],\n              ...props.bits.slice(i + 1),\n            ])\n          }\n        />\n      ))}\n    </BitField>\n  </Wrapper>\n);\n\nexport default BitSegment;\n","import React, { FC, ReactElement } from \"react\";\nimport styled from \"styled-components\";\n\nimport BitSegment from \"./BitSegment\";\nimport { stringifyBits } from \"./flop\";\n\nconst Wrapper = styled.div`\n  min-width: 36rem; // TODO: Handle this more elegantly\n  padding: 1rem 0;\n\n  display: flex;\n  overflow-x: auto;\n`;\n\ninterface BitPanelProps {\n  name: string;\n  sign: boolean[];\n  exponent: boolean[];\n  exponentValue: string;\n  significand: boolean[];\n  significandValue: string;\n  updateValue: (\n    sign: boolean[],\n    exponent: boolean[],\n    significand: boolean[]\n  ) => void;\n}\n\nconst BitPanel: FC<BitPanelProps> = (props: BitPanelProps): ReactElement => {\n  return (\n    <Wrapper>\n      <BitSegment\n        name=\"Sign\"\n        value={props.sign[0] ? \"-\" : \"+\"}\n        decimal={parseInt(stringifyBits(props.sign), 2).toFixed()}\n        bits={props.sign}\n        updateBits={(bits: boolean[]) =>\n          props.updateValue(bits, props.exponent, props.significand)\n        }\n      />\n      <BitSegment\n        name=\"Exponent\"\n        value={\"2^\" + props.exponentValue}\n        decimal={parseInt(stringifyBits(props.exponent), 2).toFixed()}\n        bits={props.exponent}\n        updateBits={(bits: boolean[]) =>\n          props.updateValue(props.sign, bits, props.significand)\n        }\n      />\n      <BitSegment\n        name=\"Mantissa/Significand\"\n        value={props.significandValue}\n        decimal={parseInt(stringifyBits(props.significand), 2).toFixed()}\n        bits={props.significand}\n        updateBits={(bits: boolean[]) =>\n          props.updateValue(props.sign, props.exponent, bits)\n        }\n      />\n    </Wrapper>\n  );\n};\n\nexport default BitPanel;\n","import React, { FC, ReactElement } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  NOTATION_FIELD_NAME,\n  ROUNDING_MODE,\n  ROUNDING_MODE_FIELD_NAME,\n} from \"../constants\";\n\nconst Wrapper = styled.div`\n  box-sizing: border-box;\n  padding: 1rem 0;\n`;\n\nconst Row = styled.div`\n  padding: 0.4rem 0;\n\n  display: flex;\n`;\n\nconst Col = styled.div`\n  flex: ${(props: { size: number }) => props.size};\n  display: flex;\n  align-items: center;\n`;\n\nconst FieldName = styled.div`\n  white-space: nowrap;\n`;\n\nconst RadioLabel = styled.label`\n  width: 100%;\n`;\n\nconst RadioButton = styled.input.attrs({ type: \"radio\" })`\n  width: 100%;\n  margin: 0;\n`;\n\nconst LineBreak = styled.br``;\n\ninterface ConfigPanelProps {\n  roundingMode: ROUNDING_MODE;\n  scientificNotation: boolean;\n  updateRoundingMode: (mode: ROUNDING_MODE) => void;\n  updateNotation: (isScientific: boolean) => void;\n}\n\nconst ConfigPanel: FC<ConfigPanelProps> = (\n  props: ConfigPanelProps\n): ReactElement => {\n  return (\n    <Wrapper>\n      {/* Rounding Mode */}\n      <Row>\n        <Col size={2}>\n          <FieldName>{ROUNDING_MODE_FIELD_NAME}</FieldName>\n        </Col>\n        <Col size={5}>\n          <RadioLabel>\n            <RadioButton\n              checked={props.roundingMode === ROUNDING_MODE.halfToEven}\n              onChange={() =>\n                props.updateRoundingMode(ROUNDING_MODE.halfToEven)\n              }\n            />\n            Nearest, Ties to Even\n            <LineBreak />\n            (IEEE 754 default)\n          </RadioLabel>\n          <RadioLabel>\n            <RadioButton\n              checked={props.roundingMode === ROUNDING_MODE.towardZero}\n              onChange={() =>\n                props.updateRoundingMode(ROUNDING_MODE.towardZero)\n              }\n            />\n            Toward 0\n            <LineBreak />\n            (truncation)\n          </RadioLabel>\n        </Col>\n      </Row>\n      {/* Result Notation */}\n      <Row>\n        <Col size={2}>\n          <FieldName>{NOTATION_FIELD_NAME}</FieldName>\n        </Col>\n        <Col size={5}>\n          <RadioLabel>\n            <RadioButton\n              checked={!props.scientificNotation}\n              onChange={() => props.updateNotation(false)}\n            />\n            Regular\n          </RadioLabel>\n          <RadioLabel>\n            <RadioButton\n              checked={props.scientificNotation}\n              onChange={() => props.updateNotation(true)}\n            />\n            Scientific\n          </RadioLabel>\n        </Col>\n      </Row>\n    </Wrapper>\n  );\n};\n\nexport default ConfigPanel;\n","import React, { FC, ReactElement, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useClipboard } from \"use-clipboard-copy\";\n\nimport {\n  ACCENT_COLOR,\n  BACKGROUND_COLOR,\n  BIT_REPRESENTATION_FIELD_NAME,\n  CLIPBOARD_BUTTON_STRING,\n  CLIPBOARD_TOOLTIP_STRING,\n  DECIMAL_INPUT_FIELD_NAME,\n  DECIMAL_INPUT_STORAGE_KEY,\n  ERROR_FIELD_NAME,\n  HEX_PREFIX_STRING,\n  HEX_REPRESENTATION_FIELD,\n  VALUE_STORED_FIELD_NAME,\n} from \"../constants\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {\n  bitsFromHexString,\n  bitsFromString,\n  stringifyBits,\n  stringifyBitsToHex,\n} from \"./flop\";\n\nconst Wrapper = styled.div`\n  box-sizing: border-box;\n  padding: 1rem 0;\n`;\n\nconst Row = styled.div`\n  min-height: 1.4rem;\n  padding: 0.2rem;\n\n  display: flex;\n`;\n\nconst Col = styled.div`\n  flex: ${(props: { size: number }) => props.size};\n  display: flex;\n  align-items: center;\n`;\n\nconst FieldName = styled.div`\n  white-space: nowrap;\n`;\n\nconst InputField = styled.input`\n  width: 100%;\n\n  &:invalid {\n    background-color: pink;\n  }\n`;\n\nconst ClipboardButton = styled.button`\n  max-width: 100%;\n  max-height: 100%;\n  padding: 0 0.4rem;\n  margin: 0.2rem;\n\n  background-color: transparent;\n  color: white;\n  border-style: solid;\n  border-radius: 0.2rem;\n  border-color: white;\n  cursor: pointer;\n  font-size: 0.8rem;\n  font-weight: bold;\n\n  &:hover {\n    background-color: white;\n    color: ${BACKGROUND_COLOR};\n  }\n\n  &:active {\n    background-color: ${ACCENT_COLOR};\n    border-color: ${ACCENT_COLOR};\n    transform: scale(0.96);\n  }\n`;\n\ninterface PanelProps {\n  formatName: string;\n  clearInput: boolean;\n  stored: string;\n  error: string;\n  bits: boolean[];\n  updateInputValue: (inputValue: string) => void;\n  updateValue: (bits: boolean[]) => void;\n}\n\nconst Panel: FC<PanelProps> = (props: PanelProps): ReactElement => {\n  const [decimalInput, setDecimalInput] = useLocalStorage(\n    `${props.formatName}${DECIMAL_INPUT_STORAGE_KEY}`,\n    \"\"\n  );\n  const [binaryRep, setBinaryRep] = useState(stringifyBits(props.bits));\n  const [hexRep, setHexRep] = useState(stringifyBitsToHex(props.bits));\n\n  // for copying to clipboard\n  const clipboard = useClipboard();\n\n  useEffect(() => {\n    if (props.clearInput) {\n      setDecimalInput(\"\");\n    }\n  }, [props.clearInput, setDecimalInput]);\n\n  useEffect(() => {\n    setBinaryRep(stringifyBits(props.bits));\n    setHexRep(stringifyBitsToHex(props.bits));\n  }, [props.bits]);\n\n  const onDecimalInput = (input: string, valid: boolean) => {\n    setDecimalInput(input);\n    if (valid) {\n      props.updateInputValue(input);\n    }\n  };\n\n  const onBinaryInput = (input: string, valid: boolean) => {\n    setBinaryRep(input);\n    if (valid) {\n      props.updateValue(bitsFromString(input));\n    }\n  };\n\n  const onHexInput = (input: string, valid: boolean) => {\n    setHexRep(input);\n    if (valid) {\n      props.updateValue(bitsFromHexString(input, props.bits.length));\n    }\n  };\n\n  const onCopyButton = (text: string) => {\n    clipboard.copy(text);\n  };\n\n  return (\n    <Wrapper>\n      {/* Decimal Input */}\n      <Row>\n        <Col size={2}>\n          <FieldName>{DECIMAL_INPUT_FIELD_NAME}</FieldName>\n        </Col>\n        <Col size={5}>\n          <InputField\n            title={DECIMAL_INPUT_FIELD_NAME}\n            autoFocus\n            pattern={`^[+-]?\\\\d*(?:\\\\.?\\\\d*(?:[eE][+-]?\\\\d+)?)?$`}\n            value={decimalInput}\n            onChange={(e) =>\n              onDecimalInput(e.target.value, e.target.validity.valid)\n            }\n          />\n          <ClipboardButton\n            title={CLIPBOARD_TOOLTIP_STRING}\n            onClick={() => onCopyButton(decimalInput)}\n          >\n            {CLIPBOARD_BUTTON_STRING}\n          </ClipboardButton>\n        </Col>\n      </Row>\n      {/* Value Stored */}\n      <Row>\n        <Col size={2}>\n          <FieldName>{VALUE_STORED_FIELD_NAME}</FieldName>\n        </Col>\n        <Col size={5}>\n          <InputField\n            title={VALUE_STORED_FIELD_NAME}\n            disabled\n            readOnly\n            value={props.stored}\n          />\n          <ClipboardButton\n            title={CLIPBOARD_TOOLTIP_STRING}\n            onClick={() => onCopyButton(props.stored)}\n          >\n            {CLIPBOARD_BUTTON_STRING}\n          </ClipboardButton>\n        </Col>\n      </Row>\n      {/* Error */}\n      <Row>\n        <Col size={2}>\n          <FieldName>{ERROR_FIELD_NAME}</FieldName>\n        </Col>\n        <Col size={5}>\n          <InputField\n            title={ERROR_FIELD_NAME}\n            disabled\n            readOnly\n            value={props.error}\n          />\n          <ClipboardButton\n            title={CLIPBOARD_TOOLTIP_STRING}\n            onClick={() => onCopyButton(props.error)}\n          >\n            {CLIPBOARD_BUTTON_STRING}\n          </ClipboardButton>\n        </Col>\n      </Row>\n      {/* Binary Representation */}\n      <Row>\n        <Col size={2}>\n          <FieldName>{BIT_REPRESENTATION_FIELD_NAME}</FieldName>\n        </Col>\n        <Col size={5}>\n          <InputField\n            title={BIT_REPRESENTATION_FIELD_NAME}\n            required\n            pattern={`^[01]{${props.bits.length}}$`}\n            value={binaryRep}\n            onChange={(e) =>\n              onBinaryInput(e.target.value, e.target.validity.valid)\n            }\n          />\n          <ClipboardButton\n            title={CLIPBOARD_TOOLTIP_STRING}\n            onClick={() => onCopyButton(binaryRep)}\n          >\n            {CLIPBOARD_BUTTON_STRING}\n          </ClipboardButton>\n        </Col>\n      </Row>\n      {/* Hexadecimal Representation */}\n      <Row>\n        <Col size={2}>\n          <FieldName>{HEX_REPRESENTATION_FIELD}</FieldName>\n        </Col>\n        <Col size={5}>\n          {HEX_PREFIX_STRING}\n          <InputField\n            title={HEX_REPRESENTATION_FIELD}\n            required\n            pattern={`^[a-fA-F0-9]{${Math.ceil(props.bits.length / 4)}}$`}\n            value={hexRep}\n            ref={clipboard.target}\n            onChange={(e) =>\n              onHexInput(e.target.value, e.target.validity.valid)\n            }\n          />\n          <ClipboardButton\n            title={CLIPBOARD_TOOLTIP_STRING}\n            onClick={() => onCopyButton(hexRep)}\n          >\n            {CLIPBOARD_BUTTON_STRING}\n          </ClipboardButton>\n        </Col>\n      </Row>\n    </Wrapper>\n  );\n};\n\nexport default Panel;\n","import React, { FC, ReactElement, useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  FLOP_STORAGE_KEY,\n  FLOP754_STORAGE_KEY,\n  NOTATION_STORAGE_KEY,\n  ROUNDING_MODE,\n  ROUNDING_STORAGE_KEY,\n} from \"../constants\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport BitPanel from \"./BitPanel\";\nimport ConfigPanel from \"./ConfigPanel\";\nimport {\n  calculateError,\n  convertFlop754ToFlop,\n  convertFlopToFlop754,\n  deconstructFlop754,\n  defaultFlop,\n  defaultFlop754,\n  deserializeFlop,\n  deserializeFlop754,\n  Flop,\n  Flop754,\n  generateFlop,\n  generateFlop754,\n  getExponent,\n  getSignificand,\n  isSubnormal,\n  stringifyFlop,\n} from \"./flop\";\nimport Panel from \"./Panel\";\n\nconst Wrapper = styled.div`\n  max-width: 100%;\n  padding: 2rem;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Title = styled.h2`\n  font-size: 1.8rem;\n`;\n\ninterface FormatConverterProps {\n  name: string;\n  exponentWidth: number;\n  significandWidth: number;\n}\n\nconst FormatConverter: FC<FormatConverterProps> = (\n  props: FormatConverterProps\n): ReactElement => {\n  const initialLoad = useRef(true);\n  const [flop, setFlop] = useLocalStorage<null | Flop>(\n    `${props.name}${FLOP_STORAGE_KEY}`,\n    null,\n    deserializeFlop\n  );\n  const [flop754, setFlop754] = useLocalStorage(\n    `${props.name}${FLOP754_STORAGE_KEY}`,\n    defaultFlop754(props.exponentWidth),\n    deserializeFlop754\n  );\n  const [roundingMode, setRoundingMode] = useLocalStorage(\n    `${props.name}${ROUNDING_STORAGE_KEY}`,\n    ROUNDING_MODE.halfToEven\n  );\n  const [scientificNotation, setScientificNotation] = useLocalStorage(\n    `${props.name}${NOTATION_STORAGE_KEY}`,\n    false\n  );\n  const [storedFlop, setStoredFlop] = useState(defaultFlop());\n  const [error, setError] = useState<null | Flop>(null);\n\n  const onFlop754Update = (value: Flop754) => {\n    setFlop(null);\n    setFlop754(value);\n  };\n\n  const onFlopUpdate = (value: Flop | null) => {\n    setFlop(value);\n  };\n\n  const onRoundingModeUpdate = (roundingMode: ROUNDING_MODE) => {\n    setRoundingMode(roundingMode);\n  };\n\n  const onNotationUpdate = (isScientific: boolean) => {\n    setScientificNotation(isScientific);\n  };\n\n  useEffect(() => {\n    setStoredFlop(convertFlop754ToFlop(flop754));\n  }, [flop754]);\n\n  useEffect(() => {\n    if (flop !== null) {\n      const updated754Value = convertFlopToFlop754(\n        flop,\n        props.exponentWidth,\n        props.significandWidth,\n        roundingMode\n      );\n      setFlop754(updated754Value);\n    }\n  }, [\n    flop,\n    roundingMode,\n    setFlop754,\n    props.exponentWidth,\n    props.significandWidth,\n  ]);\n\n  useEffect(() => {\n    setError(flop ? calculateError(flop, storedFlop) : null);\n  }, [flop, storedFlop]);\n\n  // clear states with values if component widths are set after initial load\n  useEffect(() => {\n    if (initialLoad.current) {\n      initialLoad.current = false;\n      return;\n    }\n    setFlop(null);\n    setFlop754(defaultFlop754(props.exponentWidth));\n  }, [setFlop, setFlop754, props.exponentWidth, props.significandWidth]);\n\n  const { sign, exponent, significand } = deconstructFlop754(\n    flop754,\n    props.exponentWidth,\n    props.significandWidth\n  );\n\n  return (\n    <Wrapper>\n      <Title>{props.name}</Title>\n      <BitPanel\n        {...props}\n        sign={sign}\n        exponent={exponent}\n        exponentValue={getExponent(flop754)}\n        significand={significand}\n        significandValue={\n          (isSubnormal(flop754) ? \"(subnormal) \" : \"\") + getSignificand(flop754)\n        }\n        updateValue={(\n          sign: boolean[],\n          exponent: boolean[],\n          significand: boolean[]\n        ) => onFlop754Update(generateFlop754(sign, exponent, significand))}\n      />\n      <Panel\n        formatName={props.name}\n        clearInput={flop === null}\n        stored={stringifyFlop(storedFlop, scientificNotation)}\n        error={error ? stringifyFlop(error, scientificNotation) : \"\"}\n        bits={[sign, exponent, significand].flat(1)}\n        updateInputValue={(inputValue: string) =>\n          onFlopUpdate(\n            inputValue.length === 0 ? null : generateFlop(inputValue)\n          )\n        }\n        updateValue={(bits: boolean[]) =>\n          onFlop754Update(\n            generateFlop754(\n              bits.slice(0, 1),\n              bits.slice(1, 1 + props.exponentWidth),\n              bits.slice(\n                1 + props.exponentWidth,\n                1 + props.exponentWidth + props.significandWidth\n              )\n            )\n          )\n        }\n      />\n      <ConfigPanel\n        roundingMode={roundingMode}\n        scientificNotation={scientificNotation}\n        updateRoundingMode={onRoundingModeUpdate}\n        updateNotation={onNotationUpdate}\n      />\n    </Wrapper>\n  );\n};\n\nexport default FormatConverter;\n","import React, { FC, ReactElement } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  CUSTOM_EXPONENT_FIELD_NAME,\n  CUSTOM_EXPONENT_KEY,\n  CUSTOM_SIGNIFICAND_FIELD_NAME,\n  CUSTOM_SIGNIFICAND_KEY,\n  FIXED_SIGN_FIELD_NAME,\n  TOTAL_WIDTH_FIELD_NAME,\n} from \"../constants\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport FormatConverter from \"./FormatConverter\";\n\nconst Wrapper = React.Fragment;\n\nconst WidthPanel = styled.div`\n  max-width: 60%;\n  box-sizing: border-box;\n  padding: 2rem 0 0 0;\n`;\n\nconst Row = styled.div`\n  padding: 0.4rem 0;\n\n  display: flex;\n`;\n\nconst Col = styled.div`\n  flex: ${(props: { size: number }) => props.size};\n  display: flex;\n  align-items: center;\n`;\n\nconst FieldName = styled.div`\n  white-space: nowrap;\n`;\n\nconst NumberInputField = styled.input.attrs({\n  type: \"number\",\n})`\n  width: 100%;\n`;\n\ninterface CustomFormatPanelProps {\n  name: string;\n  minExponentWidth: number;\n  maxExponentWidth: number;\n  minSignificandWidth: number;\n  maxSignificandWidth: number;\n}\n\n// TODO: Refactor the CSS in this component\nconst CustomFormatConverter: FC<CustomFormatPanelProps> = (\n  props: CustomFormatPanelProps\n): ReactElement => {\n  const [exponentWidth, setExponentWidth] = useLocalStorage(\n    `${props.name}${CUSTOM_EXPONENT_KEY}`,\n    props.minExponentWidth\n  );\n  const [significandWidth, setSignificandWidth] = useLocalStorage(\n    `${props.name}${CUSTOM_SIGNIFICAND_KEY}`,\n    props.minSignificandWidth\n  );\n\n  const onExponentUpdate = (value: number, valid: boolean) => {\n    if (valid && !isNaN(value)) {\n      console.log(value, valid);\n      setExponentWidth(value);\n    }\n  };\n\n  const onSignificandUpdate = (value: number, valid: boolean) => {\n    if (valid && !isNaN(value)) {\n      setSignificandWidth(value);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <WidthPanel>\n        {/* Sign Width */}\n        <Row>\n          <Col size={2}>\n            <FieldName>{FIXED_SIGN_FIELD_NAME}</FieldName>\n          </Col>\n          <Col size={1}>\n            <NumberInputField\n              title={FIXED_SIGN_FIELD_NAME}\n              disabled\n              readOnly\n              value={1}\n            />\n          </Col>\n        </Row>\n        {/* Exponent Width */}\n        <Row>\n          <Col size={2}>\n            <FieldName>{CUSTOM_EXPONENT_FIELD_NAME}</FieldName>\n          </Col>\n          <Col size={1}>\n            <NumberInputField\n              title={CUSTOM_EXPONENT_FIELD_NAME}\n              min={props.minExponentWidth}\n              max={props.maxExponentWidth}\n              value={exponentWidth}\n              onChange={(e) =>\n                onExponentUpdate(\n                  parseInt(e.target.value),\n                  e.target.validity.valid\n                )\n              }\n            />\n          </Col>\n        </Row>\n        {/* Significand Width */}\n        <Row>\n          <Col size={2}>\n            <FieldName>{CUSTOM_SIGNIFICAND_FIELD_NAME}</FieldName>\n          </Col>\n          <Col size={1}>\n            <NumberInputField\n              title={CUSTOM_SIGNIFICAND_FIELD_NAME}\n              min={props.minSignificandWidth}\n              max={props.maxSignificandWidth}\n              value={significandWidth}\n              onChange={(e) =>\n                onSignificandUpdate(\n                  parseInt(e.target.value),\n                  e.target.validity.valid\n                )\n              }\n            />\n          </Col>\n        </Row>\n        {/* Total Width */}\n        <Row>\n          <Col size={2}>\n            <FieldName>{TOTAL_WIDTH_FIELD_NAME}</FieldName>\n          </Col>\n          <Col size={1}>\n            <NumberInputField\n              title={TOTAL_WIDTH_FIELD_NAME}\n              disabled\n              readOnly\n              value={1 + significandWidth + exponentWidth}\n            />\n          </Col>\n        </Row>\n      </WidthPanel>\n      <FormatConverter\n        name={props.name}\n        exponentWidth={exponentWidth}\n        significandWidth={significandWidth}\n      />\n    </Wrapper>\n  );\n};\n\nexport default CustomFormatConverter;\n","import React, { FC, ReactElement } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  ACCENT_COLOR,\n  BIGNUM_ACKNOWLEDGEMENT_TEXT,\n  BIGNUM_ACKNOWLEDGEMENT_URL,\n  BUILD_SOURCE_TEXT,\n  BUILD_SOURCE_URL,\n  ISSUES_CONTRIBUTION_TEXT,\n  ISSUES_CONTRIBUTION_URL,\n  UI_ACKNOWLEDGEMENT_TEXT,\n  UI_ACKNOWLEDGEMENT_URL,\n} from \"../constants\";\n\nconst Wrapper = styled.footer`\n  padding: 1rem;\n`;\n\nconst Divider = styled.hr`\n  width: 100%;\n`;\n\nconst VersionNumber = styled.div`\n  font-size: 1.4rem;\n`;\n\nconst Acknowledgements = styled.div`\n  font-size: 1rem;\n`;\n\nconst Text = styled.p``;\n\nconst Link = styled.a`\n  color: ${ACCENT_COLOR};\n  text-decoration: none;\n`;\n\ntype TextWithLinkProps = {\n  pre: string;\n  link: string;\n  post: string;\n  url: string;\n};\n\nconst TextWithLink: FC<TextWithLinkProps> = (\n  props: TextWithLinkProps\n): ReactElement => (\n  <Text>\n    {props.pre}\n    <Link href={props.url}>{props.link}</Link>\n    {props.post}\n  </Text>\n);\n\nconst Footer: FC = (): ReactElement => (\n  <Wrapper>\n    <Divider />\n    <VersionNumber>\n      <TextWithLink {...BUILD_SOURCE_TEXT} url={BUILD_SOURCE_URL} />\n    </VersionNumber>\n    <Acknowledgements>\n      <TextWithLink {...UI_ACKNOWLEDGEMENT_TEXT} url={UI_ACKNOWLEDGEMENT_URL} />\n      <TextWithLink\n        {...BIGNUM_ACKNOWLEDGEMENT_TEXT}\n        url={BIGNUM_ACKNOWLEDGEMENT_URL}\n      />\n      <TextWithLink\n        {...ISSUES_CONTRIBUTION_TEXT}\n        url={ISSUES_CONTRIBUTION_URL}\n      />\n    </Acknowledgements>\n  </Wrapper>\n);\n\nexport default Footer;\n","import React, { FC, ReactElement } from \"react\";\nimport styled from \"styled-components\";\n\nimport { APP_TITLE } from \"../constants\";\n\nconst Wrapper = styled.header`\n  padding: 1rem;\n`;\n\nconst Title = styled.h1`\n  font-size: 2.4rem;\n`;\n\nconst Header: FC = (): ReactElement => (\n  <Wrapper>\n    <Title>{APP_TITLE}</Title>\n  </Wrapper>\n);\n\nexport default Header;\n","import React, { FC, ReactElement } from \"react\";\nimport styled from \"styled-components\";\n\nimport { BACKGROUND_COLOR } from \"../constants\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  min-width: 50rem; // TODO: Handle this more elegantly\n  padding: 1rem;\n`;\n\nconst TabButton = styled.button`\n  padding: 0.4rem 0.8rem;\n  margin: 0.6rem;\n\n  font-size: 1.4rem;\n  font-weight: bold;\n  background-color: transparent;\n  color: white;\n  border-style: solid;\n  border-radius: 0.4rem;\n  border-color: white;\n  cursor: pointer;\n\n  &:hover,\n  &.active {\n    background-color: white;\n    color: ${BACKGROUND_COLOR};\n  }\n`;\n\ninterface TabBarProps {\n  tabs: {\n    name: string;\n    urlPath: string;\n  }[];\n  activeTab: number;\n  clickTab: (urlPath: string) => void;\n}\n\nconst TabBar: FC<TabBarProps> = (props: TabBarProps): ReactElement => (\n  <Wrapper>\n    {props.tabs.map((e, i) => (\n      <TabButton\n        key={i}\n        title={e.name}\n        className={i === props.activeTab ? \"active\" : \"\"}\n        onClick={() =>\n          i !== props.activeTab ? props.clickTab(e.urlPath) : null\n        }\n      >\n        {e.name}\n      </TabButton>\n    ))}\n  </Wrapper>\n);\n\nexport default TabBar;\n","import BigNumber from \"bignumber.js\";\nimport React, { FC, ReactElement, useEffect, useMemo, useState } from \"react\";\nimport ReactGA from \"react-ga\";\nimport {\n  Redirect,\n  Route,\n  Switch,\n  useHistory,\n  useLocation,\n} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport {\n  BACKGROUND_COLOR,\n  BIGNUMBER_DECIMAL_PLACES,\n  CUSTOM,\n  DEFAULT_FORMAT_INDEX,\n  FORMATS,\n  GA_UA_ID,\n  IS_TEST_ENV,\n  MAIN_FONT_FAMILY,\n} from \"./constants\";\nimport CustomFormatConverter from \"./converter/CustomFormatConverter\";\nimport FormatConverter from \"./converter/FormatConverter\";\nimport Footer from \"./ui/Footer\";\nimport Header from \"./ui/Header\";\nimport TabBar from \"./ui/TabBar\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  min-width: 50rem; // TODO: Handle this more elegantly\n  min-height: 100%;\n  box-sizing: border-box;\n  padding: 6rem; // top-bottom left-right\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: start;\n  overflow: auto;\n\n  background-color: ${BACKGROUND_COLOR};\n  color: white;\n  text-align: center;\n  font-family: ${MAIN_FONT_FAMILY};\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n`;\n\nconst App: FC = (): ReactElement => {\n  const [active, setActive] = useState(DEFAULT_FORMAT_INDEX);\n  const location = useLocation();\n  const history = useHistory();\n  const tabs = useMemo(() => [...FORMATS, CUSTOM], []);\n\n  // configure bignumber.js library\n  BigNumber.set({ DECIMAL_PLACES: BIGNUMBER_DECIMAL_PLACES });\n\n  // set up google analytics\n  ReactGA.initialize(GA_UA_ID, { testMode: IS_TEST_ENV });\n  history.listen((location, action) => {\n    ReactGA.pageview(location.pathname);\n    ReactGA.set({ page: location.pathname, action: action });\n  });\n\n  const onTabChange = (urlPath: string) => {\n    history.push(urlPath);\n  };\n\n  useEffect(() => {\n    const index = tabs.findIndex((e) => e.urlPath === location.pathname);\n    if (index !== -1) {\n      setActive(index);\n      document.title = tabs[index].pageTitle;\n    }\n  }, [location, tabs]);\n\n  return (\n    <Wrapper>\n      <Header />\n      <TabBar tabs={tabs} activeTab={active} clickTab={onTabChange} />\n      <Switch>\n        {FORMATS.map((e, i) => (\n          <Route key={i} path={e.urlPath}>\n            <FormatConverter key={i} {...e} />\n          </Route>\n        ))}\n        <Route path={CUSTOM.urlPath}>\n          <CustomFormatConverter {...CUSTOM} />\n        </Route>\n        <Route path={\"/\"}>\n          <Redirect to={FORMATS[DEFAULT_FORMAT_INDEX].urlPath} />\n        </Route>\n      </Switch>\n      <Footer />\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\n// eslint-disable-next-line  @typescript-eslint/explicit-module-boundary-types\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createGlobalStyle } from \"styled-components\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #root {\n    height: 100%;\n    width: 100%;\n    margin: 0;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}